# Generated by Django 3.1.7 on 2021-04-01 03:13

import common.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_fsm
import model_utils.fields
import portal.models
import private_storage.fields
import private_storage.storage.files
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="ProtectionPatternProfile",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("code", models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ("description", models.CharField(max_length=80)),
                ("pattern", models.CharField(max_length=80)),
                ("expires_on", models.DateField(blank=True, null=True)),
            ],
            options={
                "db_table": "protection_pattern_profile_view",
                "ordering": ["description"],
                "managed": False,
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="SchemeApplication",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("title", models.CharField(max_length=100)),
                ("title_en", models.CharField(max_length=100, null=True)),
                ("title_mi", models.CharField(max_length=100, null=True)),
                (
                    "guidelines",
                    models.CharField(
                        blank=True, max_length=120, null=True, verbose_name="guideline link URL"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, max_length=1000, null=True, verbose_name="short description"
                    ),
                ),
                (
                    "description_en",
                    models.TextField(
                        blank=True, max_length=1000, null=True, verbose_name="short description"
                    ),
                ),
                (
                    "description_mi",
                    models.TextField(
                        blank=True, max_length=1000, null=True, verbose_name="short description"
                    ),
                ),
                ("application_number", models.CharField(blank=True, max_length=24, null=True)),
                ("is_panellist", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "scheme_application_view",
                "ordering": ["title"],
                "managed": False,
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="SchemeApplicationGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
            ],
            options={
                "db_table": "scheme_group",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Application",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "number",
                    models.CharField(
                        blank=True, editable=False, max_length=24, null=True, unique=True
                    ),
                ),
                ("application_title", models.CharField(blank=True, max_length=200, null=True)),
                ("is_team_application", models.BooleanField(default=False)),
                ("team_name", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MR", "Mr"),
                            ("MRS", "Mrs"),
                            ("MS", "Ms"),
                            ("DR", "Dr"),
                            ("PROF", "Prof"),
                        ],
                        max_length=40,
                        null=True,
                    ),
                ),
                ("first_name", models.CharField(max_length=30)),
                (
                    "middle_names",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated list of middle names",
                        max_length=280,
                        null=True,
                        verbose_name="middle names",
                    ),
                ),
                ("last_name", models.CharField(max_length=150)),
                ("organisation", models.CharField(max_length=200)),
                ("position", models.CharField(max_length=80)),
                ("postal_address", models.CharField(max_length=120)),
                ("city", models.CharField(max_length=80)),
                ("postcode", models.CharField(max_length=4)),
                (
                    "daytime_phone",
                    models.CharField(
                        blank=True, max_length=24, null=True, verbose_name="daytime phone number"
                    ),
                ),
                (
                    "mobile_phone",
                    models.CharField(
                        blank=True, max_length=24, null=True, verbose_name="mobile phone number"
                    ),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                ("is_bilingual_summary", models.BooleanField(default=False)),
                ("summary", models.TextField(blank=True, null=True)),
                ("summary_en", models.TextField(blank=True, null=True)),
                ("summary_mi", models.TextField(blank=True, null=True)),
                (
                    "file",
                    private_storage.fields.PrivateFileField(
                        blank=True,
                        help_text="Please upload completed entrant or nominee entry form",
                        null=True,
                        storage=private_storage.storage.files.PrivateFileSystemStorage(),
                        upload_to="",
                        verbose_name="filled-in entry form",
                    ),
                ),
                (
                    "photo_identity",
                    private_storage.fields.PrivateFileField(
                        blank=True,
                        help_text="Please upload a scanned copy of your passport in PDF, JPG, or PNG format",
                        null=True,
                        storage=private_storage.storage.files.PrivateFileSystemStorage(),
                        upload_to="",
                        verbose_name="Photo Identity",
                    ),
                ),
                ("state", django_fsm.FSMField(default="new", max_length=50)),
            ],
            options={
                "db_table": "application",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ApplicationDecision",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("code", models.CharField(max_length=2, primary_key=True, serialize=False)),
                ("description", models.CharField(max_length=80)),
                ("definition", models.TextField(max_length=200)),
            ],
            options={
                "db_table": "application_decision",
                "ordering": ["description"],
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Award",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="prestigious prize or medal"),
                ),
            ],
            options={
                "db_table": "award",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="CareerStage",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("code", models.CharField(max_length=2, primary_key=True, serialize=False)),
                ("description", models.CharField(max_length=40)),
                ("definition", models.TextField(max_length=1000)),
            ],
            options={
                "db_table": "career_stage",
                "ordering": ["code"],
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Criterion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("definition", models.TextField(max_length=200)),
                ("definition_en", models.TextField(max_length=200, null=True)),
                ("definition_mi", models.TextField(max_length=200, null=True)),
                (
                    "comment",
                    models.BooleanField(
                        default=True, help_text="The panelist should comment their score"
                    ),
                ),
                ("min_score", models.PositiveSmallIntegerField(default=0)),
                ("max_score", models.PositiveSmallIntegerField(default=10)),
                ("scale", models.SmallIntegerField(blank=True, null=True)),
            ],
            options={
                "verbose_name_plural": "criteria",
                "db_table": "criterion",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Ethnicity",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("code", models.CharField(max_length=5, primary_key=True, serialize=False)),
                ("description", models.CharField(max_length=40)),
                ("level_three_code", models.CharField(max_length=3)),
                ("level_three_description", models.CharField(max_length=40)),
                ("level_two_code", models.CharField(max_length=2)),
                ("level_two_description", models.CharField(max_length=40)),
                ("level_one_code", models.CharField(max_length=20)),
                ("level_one_description", models.CharField(max_length=40)),
                ("definition", models.CharField(blank=True, max_length=120, null=True)),
            ],
            options={
                "db_table": "ethnicity",
                "ordering": ["code"],
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Evaluation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "comment",
                    models.TextField(blank=True, null=True, verbose_name="Overall Comment"),
                ),
                (
                    "total_score",
                    models.PositiveIntegerField(default=0, verbose_name="Total Score"),
                ),
                (
                    "state",
                    portal.models.StateField(
                        blank=True,
                        choices=[
                            (None, None),
                            ("new", "new"),
                            ("draft", "draft"),
                            ("submitted", "submitted"),
                            ("accepted", "accepted"),
                        ],
                        default="new",
                        max_length=100,
                        no_check_for_status=True,
                        null=True,
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="evaluations",
                        to="portal.application",
                    ),
                ),
            ],
            options={
                "db_table": "evaluation",
            },
            bases=(portal.models.EvaluationMixin, common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="FieldOfResearch",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("code", models.CharField(max_length=6, primary_key=True, serialize=False)),
                ("description", models.CharField(max_length=120, verbose_name="description")),
                ("four_digit_code", models.CharField(max_length=4)),
                ("four_digit_description", models.CharField(max_length=60)),
                ("two_digit_code", models.CharField(max_length=2)),
                ("two_digit_description", models.CharField(max_length=60)),
                ("definition", models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                "db_table": "field_of_research",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="FieldOfStudy",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "code",
                    models.CharField(
                        max_length=6, primary_key=True, serialize=False, verbose_name="code"
                    ),
                ),
                ("description", models.CharField(max_length=100, verbose_name="description")),
                ("four_digit_code", models.CharField(max_length=4)),
                ("four_digit_description", models.CharField(max_length=100)),
                ("two_digit_code", models.CharField(max_length=2)),
                ("two_digit_description", models.CharField(max_length=60)),
                ("definition", models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                "db_table": "field_of_study",
                "ordering": ["description"],
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Invitation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "token",
                    models.CharField(
                        default=portal.models.get_unique_invitation_token,
                        max_length=42,
                        unique=True,
                    ),
                ),
                ("url", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("A", "apply"),
                            ("J", "join"),
                            ("R", "testify"),
                            ("T", "authorize"),
                            ("P", "panellist"),
                        ],
                        default="J",
                        max_length=1,
                    ),
                ),
                ("email", models.EmailField(max_length=254, verbose_name="email address")),
                ("first_name", models.CharField(max_length=30)),
                (
                    "middle_names",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated list of middle names",
                        max_length=280,
                        null=True,
                        verbose_name="middle names",
                    ),
                ),
                ("last_name", models.CharField(max_length=150)),
                (
                    "organisation",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="organisation"
                    ),
                ),
                (
                    "status",
                    portal.models.StateField(
                        choices=[
                            ("draft", "draft"),
                            ("submitted", "submitted"),
                            ("sent", "sent"),
                            ("accepted", "accepted"),
                            ("expired", "expired"),
                            ("bounced", "bounced"),
                        ],
                        default="draft",
                        max_length=100,
                        no_check_for_status=True,
                    ),
                ),
                (
                    "submitted_at",
                    model_utils.fields.MonitorField(
                        blank=True, default=None, monitor="status", null=True, when={"submitted"}
                    ),
                ),
                (
                    "sent_at",
                    model_utils.fields.MonitorField(
                        blank=True, default=None, monitor="status", null=True, when={"sent"}
                    ),
                ),
                (
                    "accepted_at",
                    model_utils.fields.MonitorField(
                        blank=True, default=None, monitor="status", null=True, when={"accepted"}
                    ),
                ),
                (
                    "expired_at",
                    model_utils.fields.MonitorField(
                        blank=True, default=None, monitor="status", null=True, when={"expired"}
                    ),
                ),
                (
                    "bounced_at",
                    model_utils.fields.MonitorField(
                        blank=True, default=None, monitor="status", null=True, when={"bounced"}
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invitations",
                        to="portal.application",
                    ),
                ),
                (
                    "inviter",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "invitation",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="IwiGroup",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("code", models.CharField(max_length=4, primary_key=True, serialize=False)),
                ("description", models.CharField(max_length=80)),
                ("parent_code", models.CharField(max_length=2)),
                ("parent_description", models.CharField(max_length=100)),
                ("definition", models.TextField(max_length=200)),
            ],
            options={
                "db_table": "iwi_group",
                "ordering": ["code"],
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("code", models.CharField(max_length=7, primary_key=True, serialize=False)),
                ("description", models.CharField(max_length=100)),
                ("definition", models.CharField(blank=True, max_length=120, null=True)),
            ],
            options={
                "db_table": "language",
                "ordering": ["code"],
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Organisation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.CharField(max_length=200)),
                ("identifier", models.CharField(blank=True, max_length=24, null=True)),
                ("code", models.CharField(blank=True, default="", max_length=10)),
            ],
            options={
                "db_table": "organisation",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="OrgIdentifierType",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("code", models.CharField(max_length=2, primary_key=True, serialize=False)),
                ("description", models.CharField(max_length=20)),
                ("definition", models.TextField(max_length=200)),
            ],
            options={
                "verbose_name": "organisation identifier type",
                "db_table": "org_identifier_type",
                "ordering": ["code"],
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Panellist",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "status",
                    portal.models.StateField(
                        blank=True,
                        choices=[
                            (None, None),
                            ("sent", "sent"),
                            ("accepted", "accepted"),
                            ("bounced", "bounced"),
                        ],
                        default=None,
                        max_length=100,
                        no_check_for_status=True,
                        null=True,
                    ),
                ),
                ("email", models.EmailField(max_length=120)),
                ("first_name", models.CharField(blank=True, max_length=30, null=True)),
                (
                    "middle_names",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated list of middle names",
                        max_length=280,
                        null=True,
                        verbose_name="middle names",
                    ),
                ),
                ("last_name", models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                "db_table": "panellist",
            },
            bases=(portal.models.PanellistMixin, common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PersonIdentifierType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("code", models.CharField(blank=True, max_length=2, null=True)),
                ("description", models.CharField(max_length=40)),
                ("definition", models.TextField(blank=True, max_length=200, null=True)),
            ],
            options={
                "db_table": "person_identifier_type",
                "ordering": ["description"],
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "gender",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (0, "Undisclosed"),
                            (1, "Male"),
                            (2, "Female"),
                            (3, "Gender diverse"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True, null=True, validators=[portal.models.validate_bod]
                    ),
                ),
                ("is_ethnicities_completed", models.BooleanField(default=True)),
                (
                    "education_level",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (0, "No Qualification"),
                            (1, "Level 1 Certificate"),
                            (2, "Level 2 Certificate"),
                            (3, "Level 3 Certificate"),
                            (4, "Level 4 Certificate"),
                            (5, "Level 5 Diploma/Certificate"),
                            (6, "Level 6 Graduate Certificate, Level 6 Diploma/Certificate"),
                            (
                                7,
                                "Bachelor Degree, Level 7 Graduate Diploma/Certificate, Level 7 Diploma/ Certificate",
                            ),
                            (8, "Postgraduate Diploma/Certificate, Bachelor Honours"),
                            (9, "Masters Degree"),
                            (10, "Doctorate Degree"),
                            (23, "Overseas Secondary School Qualification"),
                            (94, "Don't Know"),
                            (95, "Refused to Answer"),
                            (96, "Repeated Value"),
                            (97, "Response Unidentifiable"),
                            (98, "Response Outside Scope"),
                            (99, "Not Stated"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "employment_status",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Paid employee"),
                            (2, "Employer"),
                            (3, "Self-employed and without employees"),
                            (4, "Unpaid family worker"),
                            (5, "Not stated"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "primary_language_spoken",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Afrikaans", "Afrikaans"),
                            ("Arabic", "Arabic"),
                            ("Bahasa Indonesia", "Bahasa Indonesia"),
                            ("Chinese (not further defined)", "Chinese (not further defined)"),
                            ("Cook Islands Māori", "Cook Islands Māori"),
                            ("Dutch", "Dutch"),
                            ("English (New Zealand English)", "English (New Zealand English)"),
                            ("Fijian", "Fijian"),
                            ("French", "French"),
                            ("German", "German"),
                            ("Gujarati", "Gujarati"),
                            ("Hindi", "Hindi"),
                            ("Italian", "Italian"),
                            ("Japanese", "Japanese"),
                            ("Khmer", "Khmer"),
                            ("Korean", "Korean"),
                            ("Malayalam", "Malayalam"),
                            ("Malaysian", "Malaysian"),
                            ("Mandarin Chinese", "Mandarin Chinese"),
                            ("Māori", "Māori"),
                            ("Min Chinese", "Min Chinese"),
                            ("New Zealand Sign Language", "New Zealand Sign Language"),
                            ("Niuean", "Niuean"),
                            ("Persian", "Persian"),
                            ("Punjabi", "Punjabi"),
                            ("Russian", "Russian"),
                            ("Samoan", "Samoan"),
                            ("Serbo-Croatian", "Serbo-Croatian"),
                            ("Sinhala", "Sinhala"),
                            ("Spanish", "Spanish"),
                            ("Tagalog", "Tagalog"),
                            ("Tamil", "Tamil"),
                            ("Thai", "Thai"),
                            ("Tongan", "Tongan"),
                            ("Urdu", "Urdu"),
                            ("Vietnamese", "Vietnamese"),
                            ("Yue Chinese (Cantonese)", "Yue Chinese (Cantonese)"),
                            ("Other", "Other"),
                        ],
                        max_length=40,
                        null=True,
                    ),
                ),
                ("is_iwi_groups_completed", models.BooleanField(default=True)),
                (
                    "is_accepted",
                    models.BooleanField(default=False, verbose_name="Privace Policy Accepted"),
                ),
                ("is_career_stages_completed", models.BooleanField(default=False)),
                ("is_external_ids_completed", models.BooleanField(default=False)),
                ("has_protection_patterns", models.BooleanField(default=False)),
                ("is_employments_completed", models.BooleanField(default=False)),
                ("is_professional_bodies_completed", models.BooleanField(default=False)),
                ("is_academic_records_completed", models.BooleanField(default=False)),
                ("is_recognitions_completed", models.BooleanField(default=False)),
                ("is_cvs_completed", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "profile",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ProtectionPattern",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("code", models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ("description", models.CharField(max_length=80)),
                ("description_en", models.CharField(max_length=80, null=True)),
                ("description_mi", models.CharField(max_length=80, null=True)),
                ("pattern", models.CharField(max_length=80)),
            ],
            options={
                "db_table": "protection_pattern",
                "ordering": ["description"],
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Qualification",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("code", models.CharField(blank=True, max_length=2, null=True)),
                ("description", models.CharField(max_length=100)),
                ("definition", models.TextField(blank=True, max_length=100, null=True)),
                (
                    "is_nzqf",
                    models.BooleanField(
                        default=True,
                        verbose_name="the New Zealand Qualifications Framework Qualification level",
                    ),
                ),
            ],
            options={
                "db_table": "qualification",
                "ordering": ["definition"],
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Referee",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("email", models.EmailField(max_length=120)),
                ("first_name", models.CharField(blank=True, max_length=30, null=True)),
                (
                    "middle_names",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated list of middle names",
                        max_length=280,
                        null=True,
                        verbose_name="middle names",
                    ),
                ),
                ("last_name", models.CharField(blank=True, max_length=150, null=True)),
                ("has_testifed", models.BooleanField(blank=True, null=True)),
                (
                    "status",
                    portal.models.StateField(
                        blank=True,
                        choices=[
                            (None, None),
                            ("sent", "sent"),
                            ("accepted", "accepted"),
                            ("testified", "testified"),
                            ("opted_out", "opted out"),
                            ("bounced", "bounced"),
                        ],
                        default=None,
                        max_length=100,
                        no_check_for_status=True,
                        null=True,
                    ),
                ),
                (
                    "testified_at",
                    model_utils.fields.MonitorField(
                        blank=True, default=None, monitor="status", null=True, when={"testified"}
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="referees",
                        to="portal.application",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "referee",
            },
            bases=(portal.models.RefereeMixin, common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Round",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("title", models.CharField(blank=True, max_length=100, null=True)),
                ("opens_on", models.DateField(blank=True, null=True)),
                ("closes_on", models.DateField(blank=True, null=True)),
                ("has_online_scoring", models.BooleanField(default=True)),
                (
                    "score_sheet_template",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=portal.models.round_template_path,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["xls", "xlsx"]
                            )
                        ],
                        verbose_name="Score Sheet Template",
                    ),
                ),
            ],
            options={
                "db_table": "round",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("email", models.EmailField(max_length=120)),
                ("name", models.CharField(blank=True, max_length=120, null=True)),
            ],
            options={
                "db_table": "subscription",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Testimony",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("summary", models.TextField(blank=True, null=True)),
                (
                    "file",
                    private_storage.fields.PrivateFileField(
                        blank=True,
                        help_text="endorsement, testimony, or feedback",
                        null=True,
                        storage=private_storage.storage.files.PrivateFileSystemStorage(),
                        upload_to="",
                        verbose_name="endorsement, testimony, or feedback",
                    ),
                ),
                ("state", django_fsm.FSMField(default="new", max_length=50)),
                (
                    "referee",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="testimony",
                        to="portal.referee",
                    ),
                ),
            ],
            options={
                "db_table": "testimony",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ScoreSheet",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "file",
                    private_storage.fields.PrivateFileField(
                        help_text="Upload filled-in for all the applications in bulk",
                        storage=private_storage.storage.files.PrivateFileSystemStorage(),
                        upload_to="",
                        verbose_name="Score Sheet",
                    ),
                ),
                (
                    "panellist",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="portal.panellist",
                    ),
                ),
                (
                    "round",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="score_sheets",
                        to="portal.round",
                    ),
                ),
            ],
            options={
                "db_table": "score_sheet",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Score",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("value", models.PositiveIntegerField(default=0, verbose_name="Score")),
                ("comment", models.TextField(blank=True, null=True)),
                (
                    "criterion",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scores",
                        to="portal.criterion",
                    ),
                ),
                (
                    "evaluation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scores",
                        to="portal.evaluation",
                    ),
                ),
            ],
            options={
                "db_table": "score",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Scheme",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("title", models.CharField(max_length=100)),
                ("title_en", models.CharField(max_length=100, null=True)),
                ("title_mi", models.CharField(max_length=100, null=True)),
                (
                    "guidelines",
                    models.CharField(
                        blank=True, max_length=120, null=True, verbose_name="guideline link URL"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, max_length=1000, null=True, verbose_name="short description"
                    ),
                ),
                (
                    "description_en",
                    models.TextField(
                        blank=True, max_length=1000, null=True, verbose_name="short description"
                    ),
                ),
                (
                    "description_mi",
                    models.TextField(
                        blank=True, max_length=1000, null=True, verbose_name="short description"
                    ),
                ),
                (
                    "research_summary_required",
                    models.BooleanField(default=False, verbose_name="research summary required"),
                ),
                (
                    "team_can_apply",
                    models.BooleanField(default=False, verbose_name="can be submitted by a team"),
                ),
                ("presentation_required", models.BooleanField(default=False)),
                ("cv_required", models.BooleanField(default=True, verbose_name="CVs required")),
                (
                    "pid_required",
                    models.BooleanField(default=True, verbose_name="photo ID required"),
                ),
                ("animal_ethics_required", models.BooleanField(default=False)),
                ("code", models.CharField(blank=True, default="", max_length=10)),
                (
                    "current_round",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="portal.round",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        db_table="scheme_group",
                        to="auth.Group",
                        verbose_name="who starts the application",
                    ),
                ),
            ],
            options={
                "db_table": "scheme",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.AddField(
            model_name="round",
            name="scheme",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="rounds",
                to="portal.scheme",
            ),
        ),
        migrations.CreateModel(
            name="Recognition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "recognized_in",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="year of recognition"
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=9,
                        null=True,
                        verbose_name="amount",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        blank=True, max_length=3, null=True, verbose_name="Currency code"
                    ),
                ),
                ("put_code", models.PositiveIntegerField(blank=True, editable=False, null=True)),
                (
                    "award",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="portal.award",
                        verbose_name="award",
                    ),
                ),
                (
                    "awarded_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="portal.organisation",
                        verbose_name="awarded by",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recognitions",
                        to="portal.profile",
                    ),
                ),
            ],
            options={
                "db_table": "recognition",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ProfilePersonIdentifier",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("value", models.CharField(max_length=100)),
                ("put_code", models.PositiveIntegerField(blank=True, editable=False, null=True)),
                (
                    "code",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="portal.personidentifiertype",
                        verbose_name="type",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="portal.profile"
                    ),
                ),
            ],
            options={
                "db_table": "profile_person_identifier",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ProfileCareerStage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "year_achieved",
                    models.PositiveSmallIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            django.core.validators.MaxValueValidator(2100),
                        ]
                    ),
                ),
                (
                    "career_stage",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="portal.careerstage"
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="portal.profile"
                    ),
                ),
            ],
            options={
                "db_table": "profile_career_stage",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.AddField(
            model_name="profile",
            name="career_stages",
            field=models.ManyToManyField(
                blank=True, through="portal.ProfileCareerStage", to="portal.CareerStage"
            ),
        ),
        migrations.AddField(
            model_name="profile",
            name="ethnicities",
            field=models.ManyToManyField(
                blank=True, db_table="profile_ethnicity", to="portal.Ethnicity"
            ),
        ),
        migrations.AddField(
            model_name="profile",
            name="external_ids",
            field=models.ManyToManyField(
                blank=True,
                through="portal.ProfilePersonIdentifier",
                to="portal.PersonIdentifierType",
            ),
        ),
        migrations.AddField(
            model_name="profile",
            name="iwi_groups",
            field=models.ManyToManyField(
                blank=True, db_table="profile_iwi_group", to="portal.IwiGroup"
            ),
        ),
        migrations.AddField(
            model_name="profile",
            name="languages_spoken",
            field=models.ManyToManyField(
                blank=True, db_table="profile_language", to="portal.Language"
            ),
        ),
        migrations.AddField(
            model_name="profile",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="PersonIdentifierPattern",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("pattern", models.CharField(max_length=100)),
                (
                    "person_identifier_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="portal.personidentifiertype",
                    ),
                ),
            ],
            options={
                "db_table": "person_identifier_pattern",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.AddField(
            model_name="panellist",
            name="round",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="panellists",
                to="portal.round",
            ),
        ),
        migrations.AddField(
            model_name="panellist",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="organisation",
            name="identifier_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="portal.orgidentifiertype",
            ),
        ),
        migrations.CreateModel(
            name="Nominee",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("title", models.CharField(blank=True, max_length=40, null=True)),
                ("email", models.EmailField(max_length=254, verbose_name="email address")),
                ("first_name", models.CharField(max_length=30)),
                (
                    "middle_names",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated list of middle names",
                        max_length=280,
                        null=True,
                        verbose_name="middle names",
                    ),
                ),
                ("last_name", models.CharField(max_length=150)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "nominee",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Nomination",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("title", models.CharField(blank=True, max_length=40, null=True)),
                (
                    "email",
                    models.EmailField(
                        help_text="Email address of the nominee",
                        max_length=254,
                        verbose_name="email address",
                    ),
                ),
                ("first_name", models.CharField(max_length=30)),
                (
                    "middle_names",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated list of middle names",
                        max_length=280,
                        null=True,
                        verbose_name="middle names",
                    ),
                ),
                ("last_name", models.CharField(max_length=150)),
                ("summary", models.TextField(blank=True, null=True)),
                (
                    "file",
                    private_storage.fields.PrivateFileField(
                        blank=True,
                        help_text="Upload filled-in nominator form",
                        null=True,
                        storage=private_storage.storage.files.PrivateFileSystemStorage(),
                        upload_to="",
                        verbose_name="Nominator form",
                    ),
                ),
                (
                    "status",
                    portal.models.StateField(
                        blank=True,
                        choices=[
                            (None, None),
                            ("new", "new"),
                            ("draft", "draft"),
                            ("sent", "sent"),
                            ("submitted", "submitted"),
                            ("accepted", "accepted"),
                            ("bounced", "bounced"),
                        ],
                        default="new",
                        max_length=100,
                        no_check_for_status=True,
                        null=True,
                    ),
                ),
                (
                    "application",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nomination",
                        to="portal.application",
                    ),
                ),
                (
                    "nominator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nominations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organisation of the nominee",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="portal.organisation",
                        verbose_name="organisation",
                    ),
                ),
                (
                    "round",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nominations",
                        to="portal.round",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="nominations_to_apply",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "nomination",
            },
            bases=(portal.models.NominationMixin, common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Member",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("email", models.EmailField(max_length=120)),
                ("first_name", models.CharField(blank=True, max_length=30, null=True)),
                (
                    "middle_names",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated list of middle names",
                        max_length=280,
                        null=True,
                        verbose_name="middle names",
                    ),
                ),
                ("last_name", models.CharField(blank=True, max_length=150, null=True)),
                ("role", models.CharField(blank=True, max_length=200, null=True)),
                ("has_authorized", models.BooleanField(blank=True, null=True)),
                (
                    "status",
                    portal.models.StateField(
                        blank=True,
                        choices=[
                            (None, None),
                            ("sent", "sent"),
                            ("accepted", "accepted"),
                            ("authorized", "authorized"),
                            ("opted_out", "opted out"),
                            ("bounced", "bounced"),
                        ],
                        default=None,
                        max_length=100,
                        no_check_for_status=True,
                        null=True,
                    ),
                ),
                (
                    "authorized_at",
                    model_utils.fields.MonitorField(
                        blank=True, default=None, monitor="status", null=True, when={"authorized"}
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="members",
                        to="portal.application",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "member",
            },
            bases=(portal.models.MemberMixin, common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="MailLog",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("sent_at", models.DateTimeField(auto_now_add=True)),
                ("recipient", models.CharField(max_length=200)),
                ("sender", models.CharField(max_length=200)),
                ("subject", models.CharField(max_length=100)),
                ("was_sent_successfully", models.BooleanField(null=True)),
                ("error", models.TextField(blank=True, null=True)),
                (
                    "token",
                    models.CharField(
                        default=portal.models.get_unique_mail_token, max_length=100, unique=True
                    ),
                ),
                (
                    "invitation",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="portal.invitation",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "mail_log",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.AddField(
            model_name="invitation",
            name="member",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="invitation",
                to="portal.member",
            ),
        ),
        migrations.AddField(
            model_name="invitation",
            name="nomination",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="invitations",
                to="portal.nomination",
            ),
        ),
        migrations.AddField(
            model_name="invitation",
            name="org",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="portal.organisation",
                verbose_name="organisation",
            ),
        ),
        migrations.AddField(
            model_name="invitation",
            name="panellist",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="invitation",
                to="portal.panellist",
            ),
        ),
        migrations.AddField(
            model_name="invitation",
            name="referee",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="invitation",
                to="portal.referee",
            ),
        ),
        migrations.AddField(
            model_name="invitation",
            name="round",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="invitations",
                to="portal.round",
            ),
        ),
        migrations.CreateModel(
            name="IdentityVerification",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "file",
                    private_storage.fields.PrivateFileField(
                        blank=True,
                        null=True,
                        storage=private_storage.storage.files.PrivateFileSystemStorage(),
                        upload_to="",
                        verbose_name="Photo Identity",
                    ),
                ),
                ("resolution", models.TextField(blank=True, null=True)),
                ("state", django_fsm.FSMField(db_index=True, default="new", max_length=50)),
                (
                    "application",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="identity_verification",
                        to="portal.application",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="identity_verifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "identity_verification",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalRound",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("updated_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("title", models.CharField(blank=True, max_length=100, null=True)),
                ("opens_on", models.DateField(blank=True, null=True)),
                ("closes_on", models.DateField(blank=True, null=True)),
                ("has_online_scoring", models.BooleanField(default=True)),
                (
                    "score_sheet_template",
                    models.TextField(
                        blank=True,
                        max_length=100,
                        null=True,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["xls", "xlsx"]
                            )
                        ],
                        verbose_name="Score Sheet Template",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "scheme",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.scheme",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical round",
                "db_table": "round_history",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalReferee",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("updated_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("email", models.EmailField(max_length=120)),
                ("first_name", models.CharField(blank=True, max_length=30, null=True)),
                (
                    "middle_names",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated list of middle names",
                        max_length=280,
                        null=True,
                        verbose_name="middle names",
                    ),
                ),
                ("last_name", models.CharField(blank=True, max_length=150, null=True)),
                ("has_testifed", models.BooleanField(blank=True, null=True)),
                (
                    "status",
                    portal.models.StateField(
                        blank=True,
                        choices=[
                            (None, None),
                            ("sent", "sent"),
                            ("accepted", "accepted"),
                            ("testified", "testified"),
                            ("opted_out", "opted out"),
                            ("bounced", "bounced"),
                        ],
                        default=None,
                        max_length=100,
                        no_check_for_status=True,
                        null=True,
                    ),
                ),
                (
                    "testified_at",
                    model_utils.fields.MonitorField(
                        blank=True, default=None, monitor="status", null=True, when={"testified"}
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.application",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical referee",
                "db_table": "referee_history",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(
                simple_history.models.HistoricalChanges,
                portal.models.RefereeMixin,
                common.models.HelperMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="HistoricalProfile",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("updated_at", models.DateTimeField(blank=True, editable=False, null=True)),
                (
                    "gender",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (0, "Undisclosed"),
                            (1, "Male"),
                            (2, "Female"),
                            (3, "Gender diverse"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True, null=True, validators=[portal.models.validate_bod]
                    ),
                ),
                ("is_ethnicities_completed", models.BooleanField(default=True)),
                (
                    "education_level",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (0, "No Qualification"),
                            (1, "Level 1 Certificate"),
                            (2, "Level 2 Certificate"),
                            (3, "Level 3 Certificate"),
                            (4, "Level 4 Certificate"),
                            (5, "Level 5 Diploma/Certificate"),
                            (6, "Level 6 Graduate Certificate, Level 6 Diploma/Certificate"),
                            (
                                7,
                                "Bachelor Degree, Level 7 Graduate Diploma/Certificate, Level 7 Diploma/ Certificate",
                            ),
                            (8, "Postgraduate Diploma/Certificate, Bachelor Honours"),
                            (9, "Masters Degree"),
                            (10, "Doctorate Degree"),
                            (23, "Overseas Secondary School Qualification"),
                            (94, "Don't Know"),
                            (95, "Refused to Answer"),
                            (96, "Repeated Value"),
                            (97, "Response Unidentifiable"),
                            (98, "Response Outside Scope"),
                            (99, "Not Stated"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "employment_status",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Paid employee"),
                            (2, "Employer"),
                            (3, "Self-employed and without employees"),
                            (4, "Unpaid family worker"),
                            (5, "Not stated"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "primary_language_spoken",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Afrikaans", "Afrikaans"),
                            ("Arabic", "Arabic"),
                            ("Bahasa Indonesia", "Bahasa Indonesia"),
                            ("Chinese (not further defined)", "Chinese (not further defined)"),
                            ("Cook Islands Māori", "Cook Islands Māori"),
                            ("Dutch", "Dutch"),
                            ("English (New Zealand English)", "English (New Zealand English)"),
                            ("Fijian", "Fijian"),
                            ("French", "French"),
                            ("German", "German"),
                            ("Gujarati", "Gujarati"),
                            ("Hindi", "Hindi"),
                            ("Italian", "Italian"),
                            ("Japanese", "Japanese"),
                            ("Khmer", "Khmer"),
                            ("Korean", "Korean"),
                            ("Malayalam", "Malayalam"),
                            ("Malaysian", "Malaysian"),
                            ("Mandarin Chinese", "Mandarin Chinese"),
                            ("Māori", "Māori"),
                            ("Min Chinese", "Min Chinese"),
                            ("New Zealand Sign Language", "New Zealand Sign Language"),
                            ("Niuean", "Niuean"),
                            ("Persian", "Persian"),
                            ("Punjabi", "Punjabi"),
                            ("Russian", "Russian"),
                            ("Samoan", "Samoan"),
                            ("Serbo-Croatian", "Serbo-Croatian"),
                            ("Sinhala", "Sinhala"),
                            ("Spanish", "Spanish"),
                            ("Tagalog", "Tagalog"),
                            ("Tamil", "Tamil"),
                            ("Thai", "Thai"),
                            ("Tongan", "Tongan"),
                            ("Urdu", "Urdu"),
                            ("Vietnamese", "Vietnamese"),
                            ("Yue Chinese (Cantonese)", "Yue Chinese (Cantonese)"),
                            ("Other", "Other"),
                        ],
                        max_length=40,
                        null=True,
                    ),
                ),
                ("is_iwi_groups_completed", models.BooleanField(default=True)),
                (
                    "is_accepted",
                    models.BooleanField(default=False, verbose_name="Privace Policy Accepted"),
                ),
                ("is_career_stages_completed", models.BooleanField(default=False)),
                ("is_external_ids_completed", models.BooleanField(default=False)),
                ("has_protection_patterns", models.BooleanField(default=False)),
                ("is_employments_completed", models.BooleanField(default=False)),
                ("is_professional_bodies_completed", models.BooleanField(default=False)),
                ("is_academic_records_completed", models.BooleanField(default=False)),
                ("is_recognitions_completed", models.BooleanField(default=False)),
                ("is_cvs_completed", models.BooleanField(default=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical profile",
                "db_table": "profile_history",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalPanellist",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("updated_at", models.DateTimeField(blank=True, editable=False, null=True)),
                (
                    "status",
                    portal.models.StateField(
                        blank=True,
                        choices=[
                            (None, None),
                            ("sent", "sent"),
                            ("accepted", "accepted"),
                            ("bounced", "bounced"),
                        ],
                        default=None,
                        max_length=100,
                        no_check_for_status=True,
                        null=True,
                    ),
                ),
                ("email", models.EmailField(max_length=120)),
                ("first_name", models.CharField(blank=True, max_length=30, null=True)),
                (
                    "middle_names",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated list of middle names",
                        max_length=280,
                        null=True,
                        verbose_name="middle names",
                    ),
                ),
                ("last_name", models.CharField(blank=True, max_length=150, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "round",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.round",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical panellist",
                "db_table": "panellist_history",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(
                simple_history.models.HistoricalChanges,
                portal.models.PanellistMixin,
                common.models.HelperMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="HistoricalOrganisation",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("updated_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("name", models.CharField(max_length=200)),
                ("identifier", models.CharField(blank=True, max_length=24, null=True)),
                ("code", models.CharField(blank=True, default="", max_length=10)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "identifier_type",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.orgidentifiertype",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical organisation",
                "db_table": "organisation_history",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalNomination",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("updated_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("title", models.CharField(blank=True, max_length=40, null=True)),
                (
                    "email",
                    models.EmailField(
                        help_text="Email address of the nominee",
                        max_length=254,
                        verbose_name="email address",
                    ),
                ),
                ("first_name", models.CharField(max_length=30)),
                (
                    "middle_names",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated list of middle names",
                        max_length=280,
                        null=True,
                        verbose_name="middle names",
                    ),
                ),
                ("last_name", models.CharField(max_length=150)),
                ("summary", models.TextField(blank=True, null=True)),
                (
                    "file",
                    models.TextField(
                        blank=True,
                        help_text="Upload filled-in nominator form",
                        max_length=100,
                        null=True,
                        verbose_name="Nominator form",
                    ),
                ),
                (
                    "status",
                    portal.models.StateField(
                        blank=True,
                        choices=[
                            (None, None),
                            ("new", "new"),
                            ("draft", "draft"),
                            ("sent", "sent"),
                            ("submitted", "submitted"),
                            ("accepted", "accepted"),
                            ("bounced", "bounced"),
                        ],
                        default="new",
                        max_length=100,
                        no_check_for_status=True,
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.application",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "nominator",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Organisation of the nominee",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.organisation",
                        verbose_name="organisation",
                    ),
                ),
                (
                    "round",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.round",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical nomination",
                "db_table": "nomination_history",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(
                simple_history.models.HistoricalChanges,
                portal.models.NominationMixin,
                common.models.HelperMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="HistoricalMember",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("updated_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("email", models.EmailField(max_length=120)),
                ("first_name", models.CharField(blank=True, max_length=30, null=True)),
                (
                    "middle_names",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated list of middle names",
                        max_length=280,
                        null=True,
                        verbose_name="middle names",
                    ),
                ),
                ("last_name", models.CharField(blank=True, max_length=150, null=True)),
                ("role", models.CharField(blank=True, max_length=200, null=True)),
                ("has_authorized", models.BooleanField(blank=True, null=True)),
                (
                    "status",
                    portal.models.StateField(
                        blank=True,
                        choices=[
                            (None, None),
                            ("sent", "sent"),
                            ("accepted", "accepted"),
                            ("authorized", "authorized"),
                            ("opted_out", "opted out"),
                            ("bounced", "bounced"),
                        ],
                        default=None,
                        max_length=100,
                        no_check_for_status=True,
                        null=True,
                    ),
                ),
                (
                    "authorized_at",
                    model_utils.fields.MonitorField(
                        blank=True, default=None, monitor="status", null=True, when={"authorized"}
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.application",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical member",
                "db_table": "member_history",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(
                simple_history.models.HistoricalChanges,
                portal.models.MemberMixin,
                common.models.HelperMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="HistoricalEvaluation",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("updated_at", models.DateTimeField(blank=True, editable=False, null=True)),
                (
                    "comment",
                    models.TextField(blank=True, null=True, verbose_name="Overall Comment"),
                ),
                (
                    "total_score",
                    models.PositiveIntegerField(default=0, verbose_name="Total Score"),
                ),
                (
                    "state",
                    portal.models.StateField(
                        blank=True,
                        choices=[
                            (None, None),
                            ("new", "new"),
                            ("draft", "draft"),
                            ("submitted", "submitted"),
                            ("accepted", "accepted"),
                        ],
                        default="new",
                        max_length=100,
                        no_check_for_status=True,
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.application",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "panellist",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.panellist",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical evaluation",
                "db_table": "evaluation_history",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(
                simple_history.models.HistoricalChanges,
                portal.models.EvaluationMixin,
                common.models.HelperMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="HistoricalCriterion",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("updated_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("definition", models.TextField(max_length=200)),
                ("definition_en", models.TextField(max_length=200, null=True)),
                ("definition_mi", models.TextField(max_length=200, null=True)),
                (
                    "comment",
                    models.BooleanField(
                        default=True, help_text="The panelist should comment their score"
                    ),
                ),
                ("min_score", models.PositiveSmallIntegerField(default=0)),
                ("max_score", models.PositiveSmallIntegerField(default=10)),
                ("scale", models.SmallIntegerField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "round",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.round",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical criterion",
                "db_table": "criterion_history",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalApplication",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("updated_at", models.DateTimeField(blank=True, editable=False, null=True)),
                (
                    "number",
                    models.CharField(
                        blank=True, db_index=True, editable=False, max_length=24, null=True
                    ),
                ),
                ("application_title", models.CharField(blank=True, max_length=200, null=True)),
                ("is_team_application", models.BooleanField(default=False)),
                ("team_name", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MR", "Mr"),
                            ("MRS", "Mrs"),
                            ("MS", "Ms"),
                            ("DR", "Dr"),
                            ("PROF", "Prof"),
                        ],
                        max_length=40,
                        null=True,
                    ),
                ),
                ("first_name", models.CharField(max_length=30)),
                (
                    "middle_names",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated list of middle names",
                        max_length=280,
                        null=True,
                        verbose_name="middle names",
                    ),
                ),
                ("last_name", models.CharField(max_length=150)),
                ("organisation", models.CharField(max_length=200)),
                ("position", models.CharField(max_length=80)),
                ("postal_address", models.CharField(max_length=120)),
                ("city", models.CharField(max_length=80)),
                ("postcode", models.CharField(max_length=4)),
                (
                    "daytime_phone",
                    models.CharField(
                        blank=True, max_length=24, null=True, verbose_name="daytime phone number"
                    ),
                ),
                (
                    "mobile_phone",
                    models.CharField(
                        blank=True, max_length=24, null=True, verbose_name="mobile phone number"
                    ),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                ("is_bilingual_summary", models.BooleanField(default=False)),
                ("summary", models.TextField(blank=True, null=True)),
                ("summary_en", models.TextField(blank=True, null=True)),
                ("summary_mi", models.TextField(blank=True, null=True)),
                (
                    "file",
                    models.TextField(
                        blank=True,
                        help_text="Please upload completed entrant or nominee entry form",
                        max_length=100,
                        null=True,
                        verbose_name="filled-in entry form",
                    ),
                ),
                (
                    "photo_identity",
                    models.TextField(
                        blank=True,
                        help_text="Please upload a scanned copy of your passport in PDF, JPG, or PNG format",
                        max_length=100,
                        null=True,
                        verbose_name="Photo Identity",
                    ),
                ),
                ("state", django_fsm.FSMField(default="new", max_length=50)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.organisation",
                        verbose_name="organisation",
                    ),
                ),
                (
                    "round",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.round",
                    ),
                ),
                (
                    "submitted_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical application",
                "db_table": "application_history",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalAffiliation",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("updated_at", models.DateTimeField(blank=True, editable=False, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("EDU", "Education"),
                            ("EMP", "Employment"),
                            ("MEM", "Membership"),
                            ("SER", "Service"),
                        ],
                        max_length=10,
                    ),
                ),
                ("role", models.CharField(blank=True, max_length=100, null=True)),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("put_code", models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.organisation",
                        verbose_name="organisation",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.profile",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical affiliation",
                "db_table": "affiliation_history",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="evaluation",
            name="panellist",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="evaluations",
                to="portal.panellist",
            ),
        ),
        migrations.CreateModel(
            name="CurriculumVitae",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "title",
                    models.CharField(blank=True, max_length=200, null=True, verbose_name="title"),
                ),
                (
                    "file",
                    private_storage.fields.PrivateFileField(
                        storage=private_storage.storage.files.PrivateFileSystemStorage(),
                        upload_to="",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="portal.profile"
                    ),
                ),
            ],
            options={
                "db_table": "curriculum_vitae",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.AddField(
            model_name="criterion",
            name="round",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="criteria",
                to="portal.round",
            ),
        ),
        migrations.CreateModel(
            name="ConflictOfInterest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("has_conflict", models.BooleanField(blank=True, default=True, null=True)),
                (
                    "comment",
                    models.TextField(
                        blank=True, max_length=1000, null=True, verbose_name="Comment"
                    ),
                ),
                ("statement_given_at", models.DateTimeField(auto_now_add=True, null=True)),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conflict_of_interests",
                        to="portal.application",
                    ),
                ),
                (
                    "panellist",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conflict_of_interests",
                        to="portal.panellist",
                    ),
                ),
            ],
            options={
                "db_table": "conflict_of_interest",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.AddField(
            model_name="application",
            name="org",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="portal.organisation",
                verbose_name="organisation",
            ),
        ),
        migrations.AddField(
            model_name="application",
            name="round",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="applications",
                to="portal.round",
            ),
        ),
        migrations.AddField(
            model_name="application",
            name="submitted_by",
            field=models.ForeignKey(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Affiliation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("EDU", "Education"),
                            ("EMP", "Employment"),
                            ("MEM", "Membership"),
                            ("SER", "Service"),
                        ],
                        max_length=10,
                    ),
                ),
                ("role", models.CharField(blank=True, max_length=100, null=True)),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("put_code", models.PositiveIntegerField(blank=True, editable=False, null=True)),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="portal.organisation",
                        verbose_name="organisation",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="affiliations",
                        to="portal.profile",
                    ),
                ),
            ],
            options={
                "db_table": "affiliation",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AcademicRecord",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "start_year",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1960),
                            django.core.validators.MaxValueValidator(2099),
                        ],
                    ),
                ),
                ("conferred_on", models.DateField(blank=True, null=True)),
                ("research_topic", models.CharField(blank=True, max_length=80, null=True)),
                ("put_code", models.PositiveIntegerField(blank=True, editable=False, null=True)),
                (
                    "awarded_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="portal.organisation"
                    ),
                ),
                (
                    "discipline",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="portal.fieldofstudy",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="academic_records",
                        to="portal.profile",
                    ),
                ),
                (
                    "qualification",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="portal.qualification",
                    ),
                ),
            ],
            options={
                "db_table": "academic_record",
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ProfileProtectionPattern",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("expires_on", models.DateField(blank=True, null=True)),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile_protection_patterns",
                        to="portal.profile",
                    ),
                ),
                (
                    "protection_pattern",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile_protection_patterns",
                        to="portal.protectionpattern",
                    ),
                ),
            ],
            options={
                "db_table": "profile_protection_pattern",
                "unique_together": {("profile", "protection_pattern")},
            },
            bases=(common.models.HelperMixin, models.Model),
        ),
    ]
