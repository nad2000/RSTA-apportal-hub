# Generated by Django 3.0.10 on 2020-11-01 21:58

import common.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import model_utils.fields
import portal.models
import simple_history.models


def disable_constraints(apps, schema_editor):
    engine = schema_editor.connection.settings_dict.get("ENGINE").split('.')[-1]
    if engine == 'sqlite3':
        schema_editor.execute("PRAGMA foreign_keys = OFF;")
    else:
        schema_editor.execute("SET FOREIGN_KEY_CHECKS=0;")


def enable_constraints(apps, schema_editor):
    engine = schema_editor.connection.settings_dict.get("ENGINE").split('.')[-1]
    if engine == 'sqlite3':
        schema_editor.execute("PRAGMA foreign_keys = ON;")
    else:
        schema_editor.execute("SET FOREIGN_KEY_CHECKS=1;")


class Migration(migrations.Migration):

    # atomic = False
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("auth", "0011_update_proxy_permissions"),
        ("portal", "0027_auto_20201030_1854"),
    ]

    operations = [
        migrations.RunPython(disable_constraints),
        migrations.RunSQL("DROP VIEW IF EXISTS scheme_application_view;", ""),
        migrations.AddField(
            model_name="member",
            name="status",
            field=portal.models.StateField(
                blank=True,
                choices=[(0, "dummy")],
                default="sent",
                max_length=100,
                no_check_for_status=True,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="member",
            name="authorized_at",
            field=model_utils.fields.MonitorField(
                blank=True, default=None, monitor="status", null=True, when={"authorized"}
            ),
        ),
        migrations.CreateModel(
            name="HistoricalMember",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("updated_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("email", models.EmailField(max_length=120)),
                ("first_name", models.CharField(blank=True, max_length=30, null=True)),
                (
                    "middle_names",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated list of middle names",
                        max_length=280,
                        null=True,
                        verbose_name="middle names",
                    ),
                ),
                ("last_name", models.CharField(blank=True, max_length=150, null=True)),
                ("role", models.CharField(blank=True, max_length=200, null=True)),
                ("has_authorized", models.BooleanField(blank=True, null=True)),
                (
                    "status",
                    portal.models.StateField(
                        blank=True,
                        choices=[
                            ("sent", "sent"),
                            ("accepted", "accepted"),
                            ("authorized", "authorized"),
                            ("opted_out", "opted out"),
                            ("bounced", "bounced"),
                        ],
                        default="sent",
                        max_length=100,
                        no_check_for_status=True,
                        null=True,
                    ),
                ),
                (
                    "authorized_at",
                    model_utils.fields.MonitorField(
                        blank=True, default=None, monitor="status", null=True, when={"authorized"}
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="portal.Application",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical member",
                "db_table": "member_history",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(
                simple_history.models.HistoricalChanges,
                portal.models.MemberMixin,
                common.models.HelperMixin,
                models.Model,
            ),
        ),
        migrations.RunSQL(
            """
            -- DROP VIEW IF EXISTS scheme_application_view;
            CREATE VIEW scheme_application_view AS
            SELECT
                s.id,
                s.title,
                s.title_en,
                s.title_mi,
                s.guidelines,
                s.description,
                s.description_en,
                s.description_mi,
                EXISTS(
                    SELECt 1 FROM scheme_group AS sg LEFT JOIN  auth_group AS ag ON ag.id = sg.group_id
                    WHERE sg.scheme_id=s.id AND ag.name='APPLICANT') AS can_be_applied_to,
                EXISTS(
                    SELECt 1 FROM scheme_group AS sg LEFT JOIN  auth_group AS ag ON ag.id = sg.group_id
                    WHERE sg.scheme_id=s.id AND ag.name='NOMINATOR') AS can_be_nominated_to,
                a.created_at,
                a.updated_at,
                a.id AS application_id,
                a.number AS application_number,
                a.submitted_by_id AS application_submitted_by_id,
                s.current_round_id,
                m.user_id AS member_user_id
            FROM scheme AS s LEFT JOIN round AS r ON r.id = s.current_round_id
            LEFT JOIN application AS a ON a.round_id = r.id
            LEFT JOIN member AS m
                ON m.application_id = a.id AND (m.user_id IS NULL OR m.user_id != a.submitted_by_id)
            LEFT JOIN (
                SELECT max(a.id) AS id, a.round_id FROM application AS a LEFT JOIN member AS m
                    ON m.application_id = a.id
                WHERE m.user_id IS NULL OR m.user_id != a.submitted_by_id
                GROUP BY a.round_id, a.submitted_by_id, m.id) AS la
                ON la.round_id = r.id AND la.id = a.id
            WHERE m.id IS NULL OR m.user_id IS NOT NULL;
            """,
            "",
            state_operations=[
                migrations.CreateModel(
                    name="SchemeApplication",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                        ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                        ("title", models.CharField(max_length=100)),
                        (
                            "guidelines",
                            models.CharField(
                                blank=True,
                                max_length=120,
                                null=True,
                                verbose_name="guideline link URL",
                            ),
                        ),
                        (
                            "description",
                            models.TextField(
                                blank=True,
                                max_length=1000,
                                null=True,
                                verbose_name="short description",
                            ),
                        ),
                        ("can_be_applied_to", models.BooleanField(blank=True, null=True)),
                        ("can_be_nominated_to", models.BooleanField(blank=True, null=True)),
                        (
                            "application",
                            models.ForeignKey(
                                null=True,
                                on_delete=django.db.models.deletion.DO_NOTHING,
                                to="portal.Application",
                            ),
                        ),
                        (
                            "application_number",
                            models.CharField(
                                blank=True,
                                max_length=24,
                                null=True,
                                verbose_name="Application Number",
                            ),
                        ),
                        (
                            "current_round",
                            models.OneToOneField(
                                blank=True,
                                null=True,
                                on_delete=django.db.models.deletion.SET_NULL,
                                related_name="+",
                                to="portal.Round",
                            ),
                        ),
                    ],
                    options={
                        "db_table": "scheme_application_view",
                        "ordering": ["title"],
                        "managed": False,
                    },
                    bases=(common.models.HelperMixin, models.Model),
                ),
            ],
        ),
        migrations.RunPython(enable_constraints),
    ]
